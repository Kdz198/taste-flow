'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { CreateOrderRequest, OrderItem } from '@/utils/type';
import { useAuth } from '@/lib/auth-context';
import { useCreateOrder, useCheckOrderStatus, useGetPaymentLink } from '@/hook/useOrder';
import { OrderProcessStep } from '../ProcessingOverlay';
import { CustomerInfo } from '../CustomerForm';

interface UseOrderProcessingProps {
    orderItems: OrderItem[];
    deliveryOption: 'pickup' | 'delivery';
    selectedPaymentMethod: string;
    totalFromCart: number;
    customerInfo: CustomerInfo;
}

export const useOrderProcessing = ({
    orderItems,
    deliveryOption,
    selectedPaymentMethod,
    totalFromCart,
    customerInfo
}: UseOrderProcessingProps) => {
    const { user } = useAuth();
    const router = useRouter();
    const { mutateAsync: createOrder } = useCreateOrder();
    const { mutateAsync: checkStatus } = useCheckOrderStatus();
    const { mutateAsync: getPayment } = useGetPaymentLink();

    const [currentStep, setCurrentStep] = useState<OrderProcessStep>(OrderProcessStep.FORM_FILLING);
    const [isProcessing, setIsProcessing] = useState(false);
    const [validationErrors, setValidationErrors] = useState<{ [key: string]: string }>({});

    const validateOrderForm = () => {
        const errors: { [key: string]: string } = {};

        if (orderItems.length === 0) {
            toast.error('Vui l√≤ng ch·ªçn m√≥n ƒë·ªÉ ƒë·∫∑t h√†ng.');
            return false;
        }

        if (!customerInfo.name.trim()) {
            errors.name = 'Vui l√≤ng nh·∫≠p h·ªç t√™n.';
        }

        if (!customerInfo.phone.trim()) {
            errors.phone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.';
        } else if (!/^[0-9]{10,11}$/.test(customerInfo.phone.replace(/\s/g, ''))) {
            errors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.';
        }

        if (deliveryOption === 'delivery' && !customerInfo.address.trim()) {
            errors.address = 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng.';
        }

        if (!selectedPaymentMethod) {
            errors.payment = 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n.';
        }

        setValidationErrors(errors);

        if (Object.keys(errors).length > 0) {
            const firstError = Object.values(errors)[0];
            toast.error(firstError);
            return false;
        }

        return true;
    };

    const handlePlaceOrder = async () => {
        if (!validateOrderForm()) return;

        setIsProcessing(true);

        try {
            // Step 1: T·∫°o ƒë∆°n h√†ng
            setCurrentStep(OrderProcessStep.CREATING_ORDER);

            const payload: CreateOrderRequest = {
                order: {
                    userId: user?.id ?? 0,
                    totalAmount: totalFromCart,
                    deliveryAddress: deliveryOption === 'delivery' ? customerInfo.address : 'Store Pickup',
                },
                orderItemList: orderItems,
            };

            const result = await createOrder(payload);
            const orderId = result.orderId;
            // console.log('Order created:', result);
            if (!orderId) throw new Error('Kh√¥ng c√≥ orderId tr·∫£ v·ªÅ');

            toast.success('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');

            // Step 2: Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
            setCurrentStep(OrderProcessStep.CHECKING_STATUS);
            const statusRes = await checkStatus(orderId);
            // console.log('Order status:', statusRes);
            if (statusRes === 'NOT FOUND') {
                throw new Error('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
            }
            if (statusRes === 'CANCELLED') {
                throw new Error('ƒê∆°n h√†ng ƒë√£ b·ªã hu·ª∑');
            }
            if (statusRes === 'COMPLETED') {
                toast.success('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh');
                router.push(`/order-success?orderId=${orderId}`);
                return;
            }

            if (statusRes === 'PENDING') {
                const intervalId = setInterval(async () => {
                    try {
                        // console.log('üîÑ Checking order status for orderId:', orderId);
                        const status = await checkStatus(orderId);
                        // console.log('üîÑ Checking order status:', status);

                        if (status === 'READY_FOR_PAYMENT') {
                            clearInterval(intervalId);
                            const paymentLink = await getPayment({
                                orderId,
                                paymentMethod: selectedPaymentMethod,
                            });

                            // console.log('üîó Payment link:', paymentLink);
                            setCurrentStep(OrderProcessStep.PROCESSING_PAYMENT);
                            if (paymentLink) {
                                setCurrentStep(OrderProcessStep.REDIRECTING);
                                window.location.href = paymentLink.paymentLink;
                            } else {
                                throw new Error('Kh√¥ng c√≥ link thanh to√°n');
                            }
                        }
                    } catch (err) {
                        console.error('‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n:', err);
                        clearInterval(intervalId); // D·ª´ng n·∫øu c√≥ l·ªói
                    }
                }, 1000);
            }

        } catch (error) {
            console.error('‚ùå L·ªói khi ƒë·∫∑t h√†ng:', error);
            toast.error(error instanceof Error ? error.message : 'ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
            setCurrentStep(OrderProcessStep.FORM_FILLING);
        } finally {
            setIsProcessing(false);
        }
    };

    return {
        currentStep,
        isProcessing,
        validationErrors,
        setValidationErrors,
        handlePlaceOrder
    };
};
